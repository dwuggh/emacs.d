[language-server.tabby-agent]
command = "npx"
args = ["tabby-agent", "--stdio"]

[[language]]
name = "rust"
file-types = ["rs"]
roots = ["Cargo.toml", "Cargo.lock"]
language-servers = [
  { name = "rust-analyzer", library-directories = ["~/.cargo/registry/src", "~/.rustup/toolchains"] },
  # "tabby-agent"
]

[language-server.rust-analyzer]
command = "rust-analyzer"

[language-server.rust-analyzer.config]
inlayHints.bindingModeHints.enable = false
inlayHints.closingBraceHints.minLines = 10
inlayHints.closureReturnTypeHints.enable = "with_block"
inlayHints.discriminantHints.enable = "fieldless"
inlayHints.lifetimeElisionHints.enable = "skip_trivial"
inlayHints.typeHints.hideClosureInitialization = false


[[language]]
name = "c"
file-types = ["c"]
language-servers = [ "clangd" ]

[[language]]
name = "cpp"
file-types = ["cc", "hh", "c++", "cpp", "hpp", "h", "ipp", "tpp", "cxx", "hxx", "ixx", "txx", "ino", "C", "H", "cu", "cuh", "cppm", "h++", "ii", "inl", { glob = ".hpp.in" }, { glob = ".h.in" }]
language-servers = [ "clangd" ]


[[language]]
name = "javascript"
language-id = "javascript"
file-types = ["js", "mjs", "cjs", "rules", "es6", "pac", "jakefile"]
roots = ["package.json"]
language-servers = [
  { name = "vtsls", except-features = [ "format" ] },
  { name = "eslint", support-workspace = true },
]

[[language]]
name = "jsx"
language-id = "javascriptreact"
file-types = ["jsx"]
roots = ["package.json"]
language-servers = [
  { name = "vtsls", except-features = [ "format" ] },
  { name = "eslint", support-workspace = true, config-files = [".eslintrc.js", ".eslintrc.cjs", ".eslintrc.yaml", ".eslintrc.yml", ".eslintrc", ".eslintrc.json"] },
]

[[language]]
name = "typescript"
language-id = "typescript"
file-types = ["ts", "mts", "cts"]
roots = ["package.json"]
language-servers = [
  { name = "vtsls", except-features = [ "format" ] },
  { name = "eslint", support-workspace = true, config-files = [".eslintrc.js", ".eslintrc.cjs", ".eslintrc.yaml", ".eslintrc.yml", ".eslintrc", ".eslintrc.json"] },
]

[[language]]
name = "tsx"
language-id = "typescriptreact"
file-types = ["tsx"]
roots = ["package.json"]
language-servers = [
  { name = "vtsls", except-features = [ "format" ] },
  # { name = "tailwindcss-ls", config-files = ["tailwind.config.js", "tailwind.config.ts"] },
  { name = "eslint", support-workspace = true, config-files = [".eslintrc.js", ".eslintrc.cjs", ".eslintrc.yaml", ".eslintrc.yml", ".eslintrc", ".eslintrc.json"] },
]

[language-server.vtsls]
command = "vtsls"
args = ["--stdio"]

[language-server.vtsls.config.typescript]
tsserver = { log = "off", maxTsServerMemory = 3072 }
suggest = { completeFunctionCalls = true }
format = { enable = false }

[language-server.vtsls.config.javascript]
suggest = { completeFunctionCalls = true }
format = { enable = false }

[language-server.eslint]
command = "vscode-eslint-language-server"
args = ["--stdio"]

[language-server.eslint.config]
validate = "probe"
packageManager = "npm"
useESLintClass = false
codeAction = { disableRuleComment = { enable = true, location = "separateLine" }, showDocumentation = { enable = true } }
codeActionOnSave = { enable = false, mode = "all" }
format = true
quiet = false
onIgnoredFiles = "off"
options = {}
rulesCustomizations = []
run = "onType"
nodePath = ""
# workingDirectory = ""
experimental = { useFlatConfig = false }
problems = { shortenToSingleLine = false }


[language-server]
basedpyright = { command = "basedpyright-langserver", args = ["--stdio"], config = {} }
taplo = { command = "taplo", args = ["lsp", "stdio"] }
bash-language-server = { command = "bash-language-server", args = ["start"] }
vscode-json-language-server = { command = "vscode-json-language-server", args = ["--stdio"], config = { provideFormatter = true, json = { validate = { enable = true } } } }
jdtls = { command = "jdtls" }
dart = { command = "dart", args = ["language-server", "--client-id=emacs.lsp-proxy"] }
clangd = { command = "clangd" }
solargraph = { command = "solargraph", args = ["stdio"] }